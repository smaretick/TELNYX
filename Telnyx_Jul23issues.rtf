{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red255\green255\blue255;\red251\green2\blue7;
\red16\green60\blue192;}
{\*\expandedcolortbl;;\cssrgb\c13333\c13333\c13333;\cssrgb\c100000\c100000\c100000;\cssrgb\c100000\c14913\c0;
\cssrgb\c6667\c33333\c80000;}
\margl1440\margr1440\vieww19240\viewh8520\viewkind0
\deftab720
\pard\pardeftab720\sl300\partightenfactor0

\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
1. Someone will have to maintain this code. We haven't identified what internal team it will belong to. The file names and contents don't clarify what is actually being tested. Is there a better way to organize Selenium code?\
\'a0\
\cf4 -we can rename the test script(s) to be more descriptive or combine tests into methods into 1 module for each test\cf2 \
\cf4 -hire me\cf2 \
\
\
2. I'm not sure how this will integrate with Jenkins, or how we'll automate test runs. Do you have any recommendations for hosted services like Saucelabs? Have you looked at\'a0{\field{\*\fldinst{HYPERLINK "http://cypress.io/"}}{\fldrslt \cf5 \ul \ulc5 cypress.io}}\'a0at all? I know it's not Selenium but it looks like it could be a nice step forward from Selenium.\
Nose=={\field{\*\fldinst{HYPERLINK "http://pythontesting.net/framework/nose/nose-introduction/"}}{\fldrslt http://pythontesting.net/framework/nose/nose-introduction/}}\
\
\
\
\
3. When a test fails, how will we zero in on the problem? Maybe you can show me what that would look like\'a0tomorrow\'a0by intentionally making a test fail.\

\fs25\fsmilli12800 \
}